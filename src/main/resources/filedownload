文件下载说明：
前端：
  不需要使用ajax请求，使用window.location.href=请求controller的接口地址，例如window.location.href = "accweb/downloadConfig?filename=" + row.file_name
后台：
  参照FileDownload文件，后台代码如下：
  @RequestMapping("/downloadConfig")
    @ResponseBody
    public void downloadConfig(@RequestParam("filename") String fileName, HttpServletResponse response) {
        accWebService.downloadConfigFileById(fileName, response);
    }
    实现下载的具体逻辑：
    public void downloadConfigFileById(String fileName, HttpServletResponse response) {
        String url = webServiceUrl + fileDownloadPath + "?id=" + fileName;
        InputStream is = null;
        CloseableHttpClient httpClient = HttpClients.createDefault();
        RequestConfig requestConfig = RequestConfig.DEFAULT;
        HttpGet request = new HttpGet(url);
        request.setConfig(requestConfig);
        BufferedOutputStream bos = null;
        BufferedInputStream bis = null;
        try {
            CloseableHttpResponse httpResponse = httpClient.execute(request);
            int statusCode = httpResponse.getStatusLine().getStatusCode();
            if (statusCode != HttpStatus.SC_OK && statusCode != HttpStatus.SC_CREATED) {
                request.abort();
            } else {
                HttpEntity entity = httpResponse.getEntity();
                if (null != entity) {
                    is = entity.getContent();
                }
                ContentDisposition cd = ContentDisposition.builder("attachment").filename(fileName).build();
                response.setHeader("Content-Disposition", cd.toString());
                response.setHeader("Transfer-Encoding", httpResponse.getFirstHeader("Transfer-Encoding").getValue());
                response.setContentType(httpResponse.getFirstHeader("Content-Type").getValue());
                response.setCharacterEncoding("UTF-8");
                bos = new BufferedOutputStream(response.getOutputStream());
                if (is != null) {
                    bis = new BufferedInputStream(is);
                    byte[] buf = new byte[4096];
                    for (int i = bis.read(buf); i > 0; i = bis.read(buf)) {
                        bos.write(buf, 0, i);
                    }
                    bos.flush();
                    response.flushBuffer();
                } else {
                    LOGGER.info("文件不存在！");
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
            request.abort();
        } finally {
            close(is, bos, bis);
        }
    }
    
    private void close(InputStream is, BufferedOutputStream bos, BufferedInputStream bis) {
        try {
            if (is != null) {
                is.close();
            }
            if (bos != null) {
                bos.close();
            }
            if (bis != null) {
                bis.close();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    
