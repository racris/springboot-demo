@RequestMapping(value = "/download/{fileId}", method = RequestMethod.GET)
public ResponseEntity < byte[] > fileDocDownload(@PathVariable String fileId) {
    //从本地获取文件流，转换成字节流输出
    try {
        ByteArrayOutputStream outStream = new ByteArrayOutputStream(); //创建一个字节输出流
        FileInputStream fin = new FileInputStream("d:/test/" + fileId + ".txt"); //根据fileId获取文件输入流
        byte[] read = new byte[1024];
        int len = 0;
        while ((len = fin.read(read)) != -1) {
            outStream.write(read, 0, len);
            outStream.flush();
        }
        fin.close();
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_OCTET_STREAM); //设置返回头媒体类型为流
        headers.setContentDispositionFormData("attachment", new String((fileId + ".txt").getBytes("UTF-8"), "ISO8859-1"));
        return new ResponseEntity < byte[] > (outStream.toByteArray(), headers, HttpStatus.OK);
    } catch (Exception e) {
        e.printStackTrace();
    }
    return null;
}

/**
 * 下载文件，返回输入流。
 * 
 * @param apiUrl api接口
 * @return (文件)输入流
 * @throws Exception
 */
public static InputStream getStreamDownloadOutFile(String apiUrl) throws Exception {
    InputStream is = null;
    CloseableHttpClient httpClient = HttpClients.createDefault(); //创建默认http客户端
    RequestConfig requestConfig = RequestConfig.DEFAULT; //采用默认请求配置
    HttpGet request = new HttpGet(apiUrl); //通过get方法下载文件流
    request.setConfig(requestConfig); //设置请头求配置
    try {
        CloseableHttpResponse httpResponse = httpClient.execute(request); //执行请求，接收返回信息
        int statusCode = httpResponse.getStatusLine().getStatusCode(); //获取执行状态
        if (statusCode != HttpStatus.SC_OK && statusCode != HttpStatus.SC_CREATED) {
            request.abort();
        } else {
            HttpEntity entity = httpResponse.getEntity();
            if (null != entity) {
                is = entity.getContent(); //获取返回内容
            }
        }
    } catch (Exception e) {
        e.printStackTrace();
        request.abort();
    }
    return is;
}
